global
	#log /dev/log	local0
	#log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# An alternative list with additional directives can be obtained from
	#  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http


frontend stats
  bind 192.168.254.254:1936
  mode  http
  log global
  maxconn 10
  stats enable
  stats refresh 30s
  stats show-node
  stats show-desc Stats for OpenShift cluster 
  stats auth admin:admin123 # Most secure password in the universe. Change it!
  stats uri /stats 

#
# OpenShift API Server 6443 FE
#

listen api_server_6443_fe
  bind 192.168.254.254:6443
  mode tcp
 
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }


  acl c01_api req.ssl_sni -m end .c01.local.bytewise.my
  acl c02_api req.ssl_sni -m end .c02.local.bytewise.my

  use_backend c01_api_6443_be if c01_api
  use_backend c02_api_6443_be if c02_api


#
# OpenShift API Server 6443 BEs
#

backend c01_api_6443_be
  mode tcp
  option httpchk GET /healthz
  http-check expect string "ok"
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server master1.c01 192.168.254.31:6443 check check-ssl verify none
  server master2.c01 192.168.254.32:6443 check check-ssl verify none
  server master3.c01 192.168.254.33:6443 check check-ssl verify none
  server bootstrap.c01 192.168.254.39:6443 check check-ssl verify none


backend c02_api_6443_be
  mode tcp
  balance source
  option httpchk GET /healthz
  http-check expect string "ok"
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server master1.c02 192.168.254.41:6443 check check-ssl verify none
  server master2.c02 192.168.254.42:6443 check check-ssl verify none
  server master3.c02 192.168.254.43:6443 check check-ssl verify none
  server bootstrap.c02 192.168.254.49:6443 check check-ssl verify none


#
# OpenShift Machine Config Server 22623 FE
#

listen mcs_22623_fe
  bind 192.168.254.254:22623
  mode tcp
 
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  tcp-request content accept if { req_ssl_hello_type 2 }

  acl c01_mcs req.ssl_sni -m end .c01.local.bytewise.my
  acl c02_mcs req.ssl_sni -m end .c02.local.bytewise.my

  use_backend c01_mcs_22623_be if c01_mcs
  use_backend c02_mcs_22623_be if c02_mcs


#
# OpenShift Machine Config Server 22623 BEs
#

backend c01_mcs_22623_be
  mode tcp
  balance source
  option httpchk GET /healthz
  http-check expect status 200
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server master1.c01 192.168.254.31:22623 check check-ssl verify none
  server master2.c01 192.168.254.32:22623 check check-ssl verify none
  server master3.c01 192.168.254.33:22623 check check-ssl verify none
  server bootstrap.c01 192.168.254.39:22623 check check-ssl verify none


backend c02_mcs_22623_be
  mode tcp
  balance source
  option httpchk GET /healthz
  http-check expect status 200
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server master1.c02 192.168.254.41:22623 check check-ssl verify none
  server master2.c02 192.168.254.42:22623 check check-ssl verify none
  server master3.c02 192.168.254.43:22623 check check-ssl verify none
  server bootstrap.c02 192.168.254.49:22623 check check-ssl verify none


#
# OpenShift Router 443 FE
#

listen router_443_fe
  bind 192.168.254.254:443
  mode tcp
 
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  tcp-request content accept if { req_ssl_hello_type 2 }

  acl c01_router req.ssl_sni -m end .apps.c01.local.bytewise.my
  acl c02_router req.ssl_sni -m end .apps.c02.local.bytewise.my

  use_backend c01_router_443_be if c01_router
  use_backend c02_router_443_be if c02_router


#
# OpenShift Routers 443 BEs
#

backend c01_router_443_be
  mode tcp
  balance source
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server infra1.c01 192.168.254.34:443 check 
  server infra2.c01 192.168.254.35:443 check


backend c02_router_443_be
  mode tcp
  balance source
  
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello req_ssl_hello_type 2

  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  
  stick store-response payload_lv(43,1) if serverhello
  server master1.c02 192.168.254.41:443 check
  server master2.c02 192.168.254.42:443 check
  server master3.c02 192.168.254.43:443 check

#
# Openshift Router 80 FE
#
frontend router_80_fe
   bind 192.168.254.254:80
   mode tcp
   acl c01_router_80 hdr_end(host) -i apps.c01.local.bytewise.my
   acl c02_router_80 hdr_end(host) -i apps.c02.local.bytewise.my

   use_backend c01_router_80_be if c01_router_80
   use_backend c02_router_80_be if c02_router_80

backend c01_router_80_be
   balance source
   mode tcp
   server infra1.c01 192.168.254.34:80 check
   server infra2.c01 192.168.254.35:80 check

backend c02_router_80_be
   balance source
   mode tcp
   server master1.c02 192.168.254.41:80 check
   server master2.c02 192.168.254.42:80 check
   server master3.c02 192.168.254.43:80 check


